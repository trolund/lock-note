name: Deploy Bicep to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod # Specify the environment here

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Login to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 3: Deploy Bicep
      - name: Deploy Bicep File
        run: |
          az group create --name ${{ secrets.AZURE_RESOURCE_GROUP }} --location ${{ secrets.AZURE_LOCATION }}
          az deployment group create \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --template-file infrastructure/main.bicep

        # Step 4: Retrieve Output from Bicep Deployment (Cosmos DB connection string)
      - name: Retrieve Cosmos DB Connection String
        run: |
          output=$(az deployment group show \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name $(az deployment group list --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "[].name" -o tsv | head -n 1) \
            --query "properties.outputs.cosmosDbConnectionString.value" -o tsv)

          echo "Cosmos DB Connection String: $output"

          # Optionally, you can store the connection string in a secret or as an environment variable
          echo "COSMOS_DB_CONNECTION_STRING=$output" >> $GITHUB_ENV

          # Step 5: Use the Cosmos DB connection string in your next steps (e.g., deploying your app)

      - name: Use Cosmos DB Connection String
        run: |
          echo "Using the Cosmos DB connection string stored in the environment variable."
          echo ${{ env.COSMOS_DB_CONNECTION_STRING }}

        # Step 4: Build and Deploy React Frontend
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Dependencies
        working-directory: ./src/LockNote.Client
        run: npm install # todo ci

      # Step 5: Publish Backend and Frontend Together
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Publish API and Frontend
        working-directory: ./src
        run: dotnet publish -c Release -o ./publish

      - name: Deploy to Azure Web App
        uses: Azure/webapps-deploy@v2
        with:
          app-name: "LockNoteApp" # Your Azure Web App name
          slot-name: "production"
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./src/publish
