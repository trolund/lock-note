name: Deploy Bicep to Azure

on:
  pull_request: # Trigger the workflow on pull requests
    branches:
      - main
  push: # Trigger the workflow on push
    branches:
      - fix-func-app
  workflow_dispatch: # Allows manual triggering of the workflow

env:
  AZURE_FUNCTIONAPP_NAME: LockNoteFuncApp # Change this

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod # Specify the environment here

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Login to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 3: Deploy Bicep
      - name: Deploy Bicep File
        run: |
          az group create --name ${{ secrets.AZURE_RESOURCE_GROUP }} --location ${{ secrets.AZURE_LOCATION }}

          deploymentOutputs=$(az deployment group create \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --template-file infrastructure/main.bicep \
            --query "properties.outputs" -o json)

          # Extract the connection string from the outputs
          connectionString=$(echo $deploymentOutputs | jq -r '.connectionString.value')

          # Export the connection string as a GitHub Actions environment variable
          echo "connectionString=${connectionString}" >> $GITHUB_ENV

      - name: Use the Connection String
        run: |
          echo "Using the connection string..."
          echo "Connection String: ${{ env.connectionString }}"

      # Step 3: Retrieve Publish Profile
      # TODO wabapp name should be a secret
      - name: Get Publish Profile
        id: get-publish-profile
        run: |
          az webapp deployment list-publishing-profiles \
            --name LockNoteApp \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --output json > publishProfile.json

          # Extract the profile content and encode it for safe handling
          publish_profile=$(cat publishProfile.json | jq -r '.[0].publishingProfile')
          echo "PUBLISH_PROFILE=$publish_profile" >> $GITHUB_ENV

          echo ${{ env.PUBLISH_PROFILE }}

        # Step 4: Build and Deploy React Frontend
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Dependencies
        working-directory: ./src/LockNote.Client
        run: npm install # todo ci

      # Step 5: Publish Backend and Frontend Together
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Publish API and Frontend
        working-directory: ./src
        run: dotnet publish -c Release -o ./publish

      - name: Deploy to Azure Web App (API and Frontend)
        uses: Azure/webapps-deploy@v2
        with:
          app-name: "LockNoteApp" # Your Azure Web App name
          slot-name: "production"
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./src/publish

      - name: Build and publish function app project
        run: |
          cd ./src/LockNote.FuncApp
          dotnet build --configuration Release
          dotnet publish --configuration Release --output ./publish-func-app

      - name: Deploy Function App
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: "./src/LockNote.FuncApp/publish-func-app/"
